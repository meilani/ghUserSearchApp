/** THEMES **/

$themes: (
  darkTheme: (
    'shadow-div': none,
    'bg-body': #141D2F,
    'color-header': #fff,
    'color-text': #fff,
    'color-input': #fff,
    'bg-div': #1e2a47,
    'color-text-alt': #fff,
    'bg-stats': #141d2f,
    'color-date': #fff,
    'mode-img': url(./images/icon-sun.svg),
    'mode-img-hover': url(./images/icon-sun-hover.svg),
    'color-mode-hover': #90a4d4,
    'color-placeholder': #fff
  ),
  lightTheme: (
    'shadow-div': 0px 16px 30px -10px rgba(70, 96, 187, 0.198567),
    'bg-body': #F6F8FF,
    'color-header': #2b3442,
    'color-text': #4b6a9b,
    'color-input': #222731,
    'bg-div': #fefefe,
    'color-text-alt': #4b6a9b,
    'bg-stats': #f6f8ff,
    'color-date': #697c9a,
    'mode-img': url(./images/icon-moon.svg),
    'mode-img-hover': url(./images/icon-moon-hover.svg),
    'color-mode-hover': #222731,
    'color-placeholder': #4B6A9B
  )
);
$theme-map: null;

@mixin theme() {
  @each $theme, $map in $themes {
    // $theme: darkTheme, lightTheme
    // $map: ('text-color': ..., 'bg-color': ...)

    // make the $map globally accessible, so that theme-get() can access it
    $theme-map: $map !global;

    // make a class for each theme using interpolation -> #{}
    // use & for making the theme class ancestor of the class
    // from which you use @include theme() {...}
    .#{$theme} & {
      @content;    // the content inside @include theme() {...}
    }
  }
  // no use of the variable $theme-map now
  $theme-map: null !global;
}

  
@function theme-get($key) {
    @return map-get($theme-map, $key);
}

/** VARIABLES **/

$borderRadiusBtn: 10px;
$borderRadiusDiv: 15px;
$fontSize: 15px;
$fontSizeMobile: 13px;
$boxShadow: 0px 16px 30px -10px rgba(70, 96, 187, 0.198567);